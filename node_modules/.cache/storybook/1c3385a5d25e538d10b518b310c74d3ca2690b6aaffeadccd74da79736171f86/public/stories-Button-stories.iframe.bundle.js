"use strict";
(globalThis["webpackChunkui_component"] = globalThis["webpackChunkui_component"] || []).push([["stories-Button-stories"],{

/***/ "./src/stories/Button.stories.js":
/*!***************************************!*\
  !*** ./src/stories/Button.stories.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Large: () => (/* binding */ Large),
/* harmony export */   Off: () => (/* binding */ Off),
/* harmony export */   On: () => (/* binding */ On),
/* harmony export */   Rounded: () => (/* binding */ Rounded),
/* harmony export */   Small: () => (/* binding */ Small),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Button */ "./src/stories/Button.jsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Component/Button',
  component: _Button__WEBPACK_IMPORTED_MODULE_0__.Button,
  parameters: {
    layout: 'centered'
  },
  tags: ['autodocs']
});
const On = {
  args: {
    disabled: true,
    label: 'Button'
  }
};
const Off = {
  args: {
    disabled: false,
    label: 'Button'
  }
};
const Large = {
  args: {
    size: 'large',
    label: 'Button'
  }
};
const Small = {
  args: {
    size: 'small',
    label: 'Button'
  }
};
const Rounded = {
  args: {
    label: 'Button',
    shape: 'rounded'
  }
};
On.parameters = {
  ...On.parameters,
  docs: {
    ...On.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    disabled: true,\n    label: 'Button'\n  }\n}",
      ...On.parameters?.docs?.source
    }
  }
};
Off.parameters = {
  ...Off.parameters,
  docs: {
    ...Off.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    disabled: false,\n    label: 'Button'\n  }\n}",
      ...Off.parameters?.docs?.source
    }
  }
};
Large.parameters = {
  ...Large.parameters,
  docs: {
    ...Large.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    size: 'large',\n    label: 'Button'\n  }\n}",
      ...Large.parameters?.docs?.source
    }
  }
};
Small.parameters = {
  ...Small.parameters,
  docs: {
    ...Small.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    size: 'small',\n    label: 'Button'\n  }\n}",
      ...Small.parameters?.docs?.source
    }
  }
};
Rounded.parameters = {
  ...Rounded.parameters,
  docs: {
    ...Rounded.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: 'Button',\n    shape: 'rounded'\n  }\n}",
      ...Rounded.parameters?.docs?.source
    }
  }
};;const __namedExportsOrder = ["On","Off","Large","Small","Rounded"];

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=stories-Button-stories.iframe.bundle.js.map